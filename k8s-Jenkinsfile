pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "shankar888/springboot-k8s-sm"
        K8S_DEPLOYMENT_FILE = "k8s-deployment.yaml"
        VERSION_FILE = "version.txt" // You can store versioning information in a file in your repo
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "Cloning the repository..."
                git branch: 'main', url: 'https://github.com/ShankarMadane8/EcomDevops.git'
            }
        }

        stage('Get Current Version') {
            steps {
                echo "Fetching current version..."
                script {
                    // Read the current version from a file or DockerHub
                    if (fileExists(VERSION_FILE)) {
                        def version = readFile(VERSION_FILE).trim()
                        echo "Current version: ${version}"
                        // Increment the version (example: 1.0 -> 1.1)
                        def (major, minor) = version.tokenize('.')
                        minor = minor.toInteger() + 1
                        env.DOCKER_TAG = "${major}.${minor}"
                    } else {
                        // If no version file exists, start from 1.0
                        env.DOCKER_TAG = "1.0"
                    }
                }
            }
        }

        stage('Build Maven Project') {
            steps {
                echo "Building the Maven project..."
                bat "mvn clean package -DskipTests"
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                script {
                    // Build Docker image with the incremented tag
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "Pushing Docker image to DockerHub..."
                withDockerRegistry([credentialsId: 'dockerhub', url: '']) {
                    script {
                        // Push the image with the incremented tag
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                    }
                }
            }
        }

        stage('Update Kubernetes Deployment File') {
            steps {
                echo "Updating Kubernetes deployment file with new image..."
                script {
                    powershell """
                        (Get-Content ${K8S_DEPLOYMENT_FILE}) -replace 'image: .*', 'image: ${DOCKER_IMAGE}:${DOCKER_TAG}' | Set-Content ${K8S_DEPLOYMENT_FILE}
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo "Deploying application to Kubernetes..."
                script {
                    bat "kubectl apply -f ${K8S_DEPLOYMENT_FILE}"
                    bat "kubectl rollout restart deployment springboot-sm-deployment" // Restart the deployment to apply new image
                }
            }
        }

        stage('Start Minikube Dashboard') {
    steps {
        echo "Starting Minikube Dashboard on port 4444..."
        script {
            bat '''
                start /B cmd /c "minikube dashboard --url > dashboard-url.txt 2>&1"
                timeout /t 5
                start /B cmd /c "kubectl port-forward -n kubernetes-dashboard service/kubernetes-dashboard 4444:80"
            '''
        }
    }
}

        stage('Update Version File') {
            steps {
                echo "Updating version file..."
                script {
                    // Update the version file with the new version
                    writeFile file: VERSION_FILE, text: env.DOCKER_TAG
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully and deployed to Kubernetes!"
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
